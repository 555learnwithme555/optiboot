
optiboot_atmega328_pro_8MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  0000023a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005f  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000294  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016b  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000470  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000131  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000266  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  00000f4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    7e00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    7e02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart(ch);
    7e06:	81 ff       	sbrs	r24, 1
    7e08:	e8 d0       	rcall	.+464    	; 0x7fda <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e0a:	85 e0       	ldi	r24, 0x05	; 5
    7e0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7e10:	82 e0       	ldi	r24, 0x02	; 2
    7e12:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7e16:	88 e1       	ldi	r24, 0x18	; 24
    7e18:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7e1c:	86 e0       	ldi	r24, 0x06	; 6
    7e1e:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e22:	88 e0       	ldi	r24, 0x08	; 8
    7e24:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    7e28:	8e e0       	ldi	r24, 0x0E	; 14
    7e2a:	c1 d0       	rcall	.+386    	; 0x7fae <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e2c:	25 9a       	sbi	0x04, 5	; 4
    7e2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e30:	28 e1       	ldi	r18, 0x18	; 24
    7e32:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    7e34:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e36:	30 93 85 00 	sts	0x0085, r19
    7e3a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    7e3e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7e40:	b0 9b       	sbis	0x16, 0	; 22
    7e42:	fe cf       	rjmp	.-4      	; 0x7e40 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7e44:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e46:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    7e48:	81 50       	subi	r24, 0x01	; 1
    7e4a:	a9 f7       	brne	.-22     	; 0x7e36 <main+0x36>
    7e4c:	ee 24       	eor	r14, r14
    7e4e:	ff 24       	eor	r15, r15
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e50:	aa 24       	eor	r10, r10
    7e52:	a3 94       	inc	r10
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7e54:	b5 e0       	ldi	r27, 0x05	; 5
    7e56:	cb 2e       	mov	r12, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7e58:	a1 e1       	ldi	r26, 0x11	; 17
    7e5a:	ba 2e       	mov	r11, r26
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7e5c:	f3 e0       	ldi	r31, 0x03	; 3
    7e5e:	df 2e       	mov	r13, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e60:	9a d0       	rcall	.+308    	; 0x7f96 <getch>

    if(ch == STK_GET_PARAMETER) {
    7e62:	81 34       	cpi	r24, 0x41	; 65
    7e64:	71 f4       	brne	.+28     	; 0x7e82 <main+0x82>
      unsigned char which = getch();
    7e66:	97 d0       	rcall	.+302    	; 0x7f96 <getch>
    7e68:	08 2f       	mov	r16, r24
      verifySpace();
    7e6a:	a7 d0       	rcall	.+334    	; 0x7fba <verifySpace>
      if (which == 0x82) {
    7e6c:	02 38       	cpi	r16, 0x82	; 130
    7e6e:	11 f4       	brne	.+4      	; 0x7e74 <main+0x74>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
    7e70:	86 e0       	ldi	r24, 0x06	; 6
    7e72:	05 c0       	rjmp	.+10     	; 0x7e7e <main+0x7e>
      } else if (which == 0x81) {
    7e74:	01 38       	cpi	r16, 0x81	; 129
    7e76:	11 f4       	brne	.+4      	; 0x7e7c <main+0x7c>
	  putch(OPTIBOOT_MAJVER);
    7e78:	84 e0       	ldi	r24, 0x04	; 4
    7e7a:	01 c0       	rjmp	.+2      	; 0x7e7e <main+0x7e>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    7e7c:	83 e0       	ldi	r24, 0x03	; 3
    7e7e:	83 d0       	rcall	.+262    	; 0x7f86 <putch>
    7e80:	7f c0       	rjmp	.+254    	; 0x7f80 <main+0x180>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    7e82:	82 34       	cpi	r24, 0x42	; 66
    7e84:	11 f4       	brne	.+4      	; 0x7e8a <main+0x8a>
      // SET DEVICE is ignored
      getNch(20);
    7e86:	84 e1       	ldi	r24, 0x14	; 20
    7e88:	03 c0       	rjmp	.+6      	; 0x7e90 <main+0x90>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7e8a:	85 34       	cpi	r24, 0x45	; 69
    7e8c:	19 f4       	brne	.+6      	; 0x7e94 <main+0x94>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e8e:	85 e0       	ldi	r24, 0x05	; 5
    7e90:	9c d0       	rcall	.+312    	; 0x7fca <getNch>
    7e92:	76 c0       	rjmp	.+236    	; 0x7f80 <main+0x180>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7e94:	85 35       	cpi	r24, 0x55	; 85
    7e96:	79 f4       	brne	.+30     	; 0x7eb6 <main+0xb6>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    7e98:	7e d0       	rcall	.+252    	; 0x7f96 <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    7e9a:	e8 2e       	mov	r14, r24
    7e9c:	ff 24       	eor	r15, r15
    7e9e:	7b d0       	rcall	.+246    	; 0x7f96 <getch>
    7ea0:	08 2f       	mov	r16, r24
    7ea2:	10 e0       	ldi	r17, 0x00	; 0
    7ea4:	10 2f       	mov	r17, r16
    7ea6:	00 27       	eor	r16, r16
    7ea8:	0e 29       	or	r16, r14
    7eaa:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    7eac:	00 0f       	add	r16, r16
    7eae:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    7eb0:	84 d0       	rcall	.+264    	; 0x7fba <verifySpace>
    7eb2:	78 01       	movw	r14, r16
    7eb4:	65 c0       	rjmp	.+202    	; 0x7f80 <main+0x180>
    }
    else if(ch == STK_UNIVERSAL) {
    7eb6:	86 35       	cpi	r24, 0x56	; 86
    7eb8:	21 f4       	brne	.+8      	; 0x7ec2 <main+0xc2>
      // UNIVERSAL command is ignored
      getNch(4);
    7eba:	84 e0       	ldi	r24, 0x04	; 4
    7ebc:	86 d0       	rcall	.+268    	; 0x7fca <getNch>
      putch(0x00);
    7ebe:	80 e0       	ldi	r24, 0x00	; 0
    7ec0:	de cf       	rjmp	.-68     	; 0x7e7e <main+0x7e>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7ec2:	84 36       	cpi	r24, 0x64	; 100
    7ec4:	09 f0       	breq	.+2      	; 0x7ec8 <main+0xc8>
    7ec6:	40 c0       	rjmp	.+128    	; 0x7f48 <main+0x148>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    7ec8:	66 d0       	rcall	.+204    	; 0x7f96 <getch>
      length = getch();
    7eca:	65 d0       	rcall	.+202    	; 0x7f96 <getch>
    7ecc:	08 2f       	mov	r16, r24
      getch();
    7ece:	63 d0       	rcall	.+198    	; 0x7f96 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7ed0:	80 e0       	ldi	r24, 0x00	; 0
    7ed2:	e8 16       	cp	r14, r24
    7ed4:	80 e7       	ldi	r24, 0x70	; 112
    7ed6:	f8 06       	cpc	r15, r24
    7ed8:	18 f4       	brcc	.+6      	; 0x7ee0 <main+0xe0>
    7eda:	f7 01       	movw	r30, r14
    7edc:	d7 be       	out	0x37, r13	; 55
    7ede:	e8 95       	spm
    7ee0:	c0 e0       	ldi	r28, 0x00	; 0
    7ee2:	d1 e0       	ldi	r29, 0x01	; 1

      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7ee4:	58 d0       	rcall	.+176    	; 0x7f96 <getch>
    7ee6:	89 93       	st	Y+, r24
      while (--length);
    7ee8:	0c 17       	cp	r16, r28
    7eea:	e1 f7       	brne	.-8      	; 0x7ee4 <main+0xe4>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    7eec:	f0 e0       	ldi	r31, 0x00	; 0
    7eee:	ef 16       	cp	r14, r31
    7ef0:	f0 e7       	ldi	r31, 0x70	; 112
    7ef2:	ff 06       	cpc	r15, r31
    7ef4:	18 f0       	brcs	.+6      	; 0x7efc <main+0xfc>
    7ef6:	f7 01       	movw	r30, r14
    7ef8:	d7 be       	out	0x37, r13	; 55
    7efa:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    7efc:	5e d0       	rcall	.+188    	; 0x7fba <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7efe:	07 b6       	in	r0, 0x37	; 55
    7f00:	00 fc       	sbrc	r0, 0
    7f02:	fd cf       	rjmp	.-6      	; 0x7efe <main+0xfe>
    7f04:	a7 01       	movw	r20, r14
    7f06:	a0 e0       	ldi	r26, 0x00	; 0
    7f08:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7f0a:	2c 91       	ld	r18, X
    7f0c:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    7f0e:	11 96       	adiw	r26, 0x01	; 1
    7f10:	8c 91       	ld	r24, X
    7f12:	11 97       	sbiw	r26, 0x01	; 1
    7f14:	90 e0       	ldi	r25, 0x00	; 0
    7f16:	98 2f       	mov	r25, r24
    7f18:	88 27       	eor	r24, r24
    7f1a:	82 2b       	or	r24, r18
    7f1c:	93 2b       	or	r25, r19
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    7f1e:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f20:	fa 01       	movw	r30, r20
    7f22:	0c 01       	movw	r0, r24
    7f24:	a7 be       	out	0x37, r10	; 55
    7f26:	e8 95       	spm
    7f28:	11 24       	eor	r1, r1
        addrPtr += 2;
    7f2a:	4e 5f       	subi	r20, 0xFE	; 254
    7f2c:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    7f2e:	f1 e0       	ldi	r31, 0x01	; 1
    7f30:	a0 38       	cpi	r26, 0x80	; 128
    7f32:	bf 07       	cpc	r27, r31
    7f34:	51 f7       	brne	.-44     	; 0x7f0a <main+0x10a>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7f36:	f7 01       	movw	r30, r14
    7f38:	c7 be       	out	0x37, r12	; 55
    7f3a:	e8 95       	spm
      boot_spm_busy_wait();
    7f3c:	07 b6       	in	r0, 0x37	; 55
    7f3e:	00 fc       	sbrc	r0, 0
    7f40:	fd cf       	rjmp	.-6      	; 0x7f3c <main+0x13c>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7f42:	b7 be       	out	0x37, r11	; 55
    7f44:	e8 95       	spm
    7f46:	1c c0       	rjmp	.+56     	; 0x7f80 <main+0x180>
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f48:	84 37       	cpi	r24, 0x74	; 116
    7f4a:	61 f4       	brne	.+24     	; 0x7f64 <main+0x164>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    7f4c:	24 d0       	rcall	.+72     	; 0x7f96 <getch>
      length = getch();
    7f4e:	23 d0       	rcall	.+70     	; 0x7f96 <getch>
    7f50:	08 2f       	mov	r16, r24
      getch();
    7f52:	21 d0       	rcall	.+66     	; 0x7f96 <getch>

      verifySpace();
    7f54:	32 d0       	rcall	.+100    	; 0x7fba <verifySpace>
        __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
        // read a Flash byte and increment the address
        __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
        putch(ch);
    7f56:	f7 01       	movw	r30, r14
    7f58:	85 91       	lpm	r24, Z+
    7f5a:	7f 01       	movw	r14, r30
    7f5c:	14 d0       	rcall	.+40     	; 0x7f86 <putch>
      } while (--length);
    7f5e:	01 50       	subi	r16, 0x01	; 1
    7f60:	d1 f7       	brne	.-12     	; 0x7f56 <main+0x156>
    7f62:	0e c0       	rjmp	.+28     	; 0x7f80 <main+0x180>
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f64:	85 37       	cpi	r24, 0x75	; 117
    7f66:	39 f4       	brne	.+14     	; 0x7f76 <main+0x176>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f68:	28 d0       	rcall	.+80     	; 0x7fba <verifySpace>
      putch(SIGNATURE_0);
    7f6a:	8e e1       	ldi	r24, 0x1E	; 30
    7f6c:	0c d0       	rcall	.+24     	; 0x7f86 <putch>
      putch(SIGNATURE_1);
    7f6e:	85 e9       	ldi	r24, 0x95	; 149
    7f70:	0a d0       	rcall	.+20     	; 0x7f86 <putch>
      putch(SIGNATURE_2);
    7f72:	8f e0       	ldi	r24, 0x0F	; 15
    7f74:	84 cf       	rjmp	.-248    	; 0x7e7e <main+0x7e>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f76:	81 35       	cpi	r24, 0x51	; 81
    7f78:	11 f4       	brne	.+4      	; 0x7f7e <main+0x17e>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f7a:	88 e0       	ldi	r24, 0x08	; 8
    7f7c:	18 d0       	rcall	.+48     	; 0x7fae <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f7e:	1d d0       	rcall	.+58     	; 0x7fba <verifySpace>
    }
    putch(STK_OK);
    7f80:	80 e1       	ldi	r24, 0x10	; 16
    7f82:	01 d0       	rcall	.+2      	; 0x7f86 <putch>
    7f84:	6d cf       	rjmp	.-294    	; 0x7e60 <main+0x60>

00007f86 <putch>:
  }
}

void putch(char ch) {
    7f86:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f88:	80 91 c0 00 	lds	r24, 0x00C0
    7f8c:	85 ff       	sbrs	r24, 5
    7f8e:	fc cf       	rjmp	.-8      	; 0x7f88 <putch+0x2>
  UART_UDR = ch;
    7f90:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7f94:	08 95       	ret

00007f96 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f96:	80 91 c0 00 	lds	r24, 0x00C0
    7f9a:	87 ff       	sbrs	r24, 7
    7f9c:	fc cf       	rjmp	.-8      	; 0x7f96 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f9e:	80 91 c0 00 	lds	r24, 0x00C0
    7fa2:	84 fd       	sbrc	r24, 4
    7fa4:	01 c0       	rjmp	.+2      	; 0x7fa8 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fa6:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7fa8:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fac:	08 95       	ret

00007fae <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fae:	e0 e6       	ldi	r30, 0x60	; 96
    7fb0:	f0 e0       	ldi	r31, 0x00	; 0
    7fb2:	98 e1       	ldi	r25, 0x18	; 24
    7fb4:	90 83       	st	Z, r25
  WDTCSR = x;
    7fb6:	80 83       	st	Z, r24
}
    7fb8:	08 95       	ret

00007fba <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fba:	ed df       	rcall	.-38     	; 0x7f96 <getch>
    7fbc:	80 32       	cpi	r24, 0x20	; 32
    7fbe:	19 f0       	breq	.+6      	; 0x7fc6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fc0:	88 e0       	ldi	r24, 0x08	; 8
    7fc2:	f5 df       	rcall	.-22     	; 0x7fae <watchdogConfig>
    7fc4:	ff cf       	rjmp	.-2      	; 0x7fc4 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fc6:	84 e1       	ldi	r24, 0x14	; 20
}
    7fc8:	de cf       	rjmp	.-68     	; 0x7f86 <putch>

00007fca <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fca:	1f 93       	push	r17
    7fcc:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fce:	e3 df       	rcall	.-58     	; 0x7f96 <getch>
    7fd0:	11 50       	subi	r17, 0x01	; 1
    7fd2:	e9 f7       	brne	.-6      	; 0x7fce <getNch+0x4>
  verifySpace();
    7fd4:	f2 df       	rcall	.-28     	; 0x7fba <verifySpace>
}
    7fd6:	1f 91       	pop	r17
    7fd8:	08 95       	ret

00007fda <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fda:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fdc:	80 e0       	ldi	r24, 0x00	; 0
    7fde:	e7 df       	rcall	.-50     	; 0x7fae <watchdogConfig>
  __asm__ __volatile__ (
    7fe0:	ee 27       	eor	r30, r30
    7fe2:	ff 27       	eor	r31, r31
    7fe4:	09 94       	ijmp
